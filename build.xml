<project name="XBel" default="compile" basedir=".">
  <!-- set global properties for this build -->
  <property name="jsrc" value="${basedir}/jsrc"/>
  <property name="eduprefix" value="jsrc/edu/toronto/cs"/>
  <property name="codedir" value="${jsrc}/${eduprefix}"/>
  <!-- <property name="build.compiler" value="jikes"/> -->
  <property name="build.compiler.emacs" value="true"/>
  <property name="jarscratch" value="/tmp/xbelJarScratch.${user.name}"/>
  <property name="libdir" value="${basedir}/lib"/>
  <!--  <property name="distdir" value="${basedir}/dist"/> -->
  <property name="build" value="build"/>
  <property name="distdir" value="/tmp/tlq-dist"/>
  <property name="docdir" value="doc"/>

  <import file="junit/testing.xml" />

  <!-- define our classpath as basedir + everything in lib/buildlib -->
  <path id="xbel.classpath">
    <pathelement location="${build}"/>
    <fileset dir="${libdir}/buildLib">
      <include name="*.jar"/>
    </fileset>
  </path>


  <target name="clean_stdcparser"
	  description="Removes files generated by cparser">

    <!-- StdCParser.g -->
    <delete file="${jsrc}/edu/toronto/cs/cparser/StdCParser.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/StdCLexer.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/STDCTokenTypes.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/STDCTokenTypes.txt"/>
  </target>
  <target name="clean_gnucparser">
    <!-- GnuCParser.g -->
    <delete file="${jsrc}/edu/toronto/cs/cparser/GnuCParser.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/GnuCLexer.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/GNUCTokenTypes.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/GNUCTokenTypes.txt"/>
  </target>

  <target name="clean_cilparser">
    <!-- CILParser.g -->
    <delete file="${jsrc}/edu/toronto/cs/cparser/CILParser.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/CILLexer.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/CILTokenTypes.java"/>
    <delete file="${jsrc}/edu/toronto/cs/cparser/CILTokenTypes.txt"/>
  </target>

  <target name="clean_cilprogramblocker">
    <!-- CILProgramBlocker.g -->
    <delete file="${jsrc}/edu/toronto/cs/cparser/CILProgramBlocker.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/cparser/CILProgramBlockerTokenTypes.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/cparser/CILProgramBlockerTokenTypes.txt"/>
  </target>

  <target name="clean_ciltransformer">
    <!-- CILTransformer.g -->
    <delete file="${jsrc}/edu/toronto/cs/cparser/CILTransformer.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/cparser/CILTransformerTokenTypes.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/cparser/CILTransformerTokenTypes.txt"/>
  </target>

  <target name="stdcparser" description="ANTLR parser for C">
    <antlr target="${jsrc}/edu/toronto/cs/cparser/StdCParser.g"/>
  </target>

  <target name="gnucparser" depends="stdcparser"
	  description="ANTLR parser for GNU C">
    <antlr target="${jsrc}/edu/toronto/cs/cparser/GnuCParser.g"
	   glib="${jsrc}/edu/toronto/cs/cparser/StdCParser.g"/>
  </target>

  <target name="cilparser" depends="gnucparser"
	  description="ANTLR parser for CIL">
    <antlr target="${jsrc}/edu/toronto/cs/cparser/CILParser.g"/>
  </target>

  <target name="cilprogramblocker" depends="cilparser"
	  description="ANTLR based blocker for CIL ASTs">
    <antlr target="${jsrc}/edu/toronto/cs/cparser/CILProgramBlocker.g"/>
  </target>

  <target name="ciltransformer" depends="cilprogramblocker"
	  description="no idea">
    <antlr target="${jsrc}/edu/toronto/cs/cparser/CILTransformer.g"/>
  </target>

  <target name="cparser" depends="ciltransformer"
	  description="generates ANTLR based C parsers"/>

  <target name="clean_cparser"
	  depends="clean_stdcparser,clean_gnucparser,clean_cilparser,clean_cilprogramblocker,clean_ciltransformer"/>

  <target name="oldcparser" description="deprecated cparser target">
    <antlr target="${jsrc}/edu/toronto/cs/cparser/StdCParser.g"/>
    <antlr target="${jsrc}/edu/toronto/cs/cparser/GnuCParser.g"
	   glib="${jsrc}/edu/toronto/cs/cparser/StdCParser.g"/>

    <!--
    <antlr target="edu/toronto/cs/cparser/GnuCTreeParser.g"/>
    -->
    <antlr target="${jsrc}/edu/toronto/cs/cparser/CILParser.g"/>
    <antlr target="${jsrc}/edu/toronto/cs/cparser/CILProgramBlocker.g"/>
    <antlr target="${jsrc}/edu/toronto/cs/cparser/CILTransformer.g"/>
    <!-- <antlr target="edu/toronto/cs/cparser/RootedGnuCParser.g"
	         glib="edu/toronto/cs/cparser/StdCParser.g;edu/toronto/cs/cparser/GnuCParser.g"/>
    <antlr target="edu/toronto/cs/cparser/RootedGnuCTreeParser.g"
	         glib="edu/toronto/cs/cparser/GnuCTreeParser.g"/>
     -->
  </target>

  <!-- Old all-in-one blocker/symbolic-executor
  <target name="abstractor" depends="cparser">
    <antlr target="${jsrc}/edu/toronto/cs/boolpg/abstraction/CProgramAbstractor.g"
	   glib="${jsrc}/edu/toronto/cs/cparser/GnuCTreeParser.g"/>
  </target>
  -->

  <!--
  <target name="blocker" depends="cparser">
    <antlr target="${jsrc}/edu/toronto/cs/boolpg/abstraction/CProgramBlocker.g"
	         glib="${jsrc}/edu/toronto/cs/cparser/GnuCTreeParser.g"/>
  </target>
  -->

  <target name="executor" depends="cilparser">
    <antlr target="${jsrc}/edu/toronto/cs/yasm/abstractor/SymbolicExecutor.g"
           dir="${jsrc}/edu/toronto/cs/cparser"
           outputdirectory="${jsrc}/edu/toronto/cs/yasm/abstractor"/>
  </target>

  <target name="clean_executor">
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/SymbolicExecutor.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/SymbolicExecutorTokenTypes.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/SymbolicExecutorTokenTypes.txt"/>

  </target>

  <target name="declsparser" depends="cparser">
    <antlr target="${jsrc}/edu/toronto/cs/yasm/abstractor/DeclsParser.g"
           dir="${jsrc}/edu/toronto/cs/cparser"
           outputdirectory="${jsrc}/edu/toronto/cs/yasm/abstractor"/>
  </target>

  <target name="clean_declsparser">
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/DeclsParser.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/DeclsParserTokenTypes.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/DeclsParserTokenTypes.txt"/>
  </target>

  <target name="predparser" depends="cparser">
    <antlr target="${jsrc}/edu/toronto/cs/yasm/abstractor/PredicateParser.g"
	         glib="${jsrc}/edu/toronto/cs/cparser/StdCParser.g"
           dir="${jsrc}/edu/toronto/cs/cparser"
           outputdirectory="${jsrc}/edu/toronto/cs/yasm/abstractor"/>
  </target>

  <target name="clean_predparser">
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/PredicateParser.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/PredicateParserTokenTypes.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/PredicateParserTokenTypes.txt"/>
    <delete
     file="${jsrc}/edu/toronto/cs/yasm/abstractor/expandedPredicateParser.g"/>
  </target>


  <target name="ctlparser" description="ANTL CTL Parser">
    <!-- make the CTL parser -->
    <antlr target="${jsrc}/edu/toronto/cs/ctl/antlr/CTL.g"/>
  </target>

  <target name="clean_ctlparser">
    <delete file="${jsrc}/edu/toronto/cs/ctl/antlr/CTLLexer.java"/>
    <delete file="${jsrc}/edu/toronto/cs/ctl/antlr/CTLParser.java"/>
    <delete file="${jsrc}/edu/toronto/cs/ctl/antlr/CTLTokenTypes.java"/>
    <delete file="${jsrc}/edu/toronto/cs/ctl/antlr/CTLTokenTypes.txt"/>
    <delete file="${jsrc}/edu/toronto/cs/ctl/antlr/CTLTreeBuilder.java"/>
  </target>


  <target name="gclangparser">
    <antlr target="${jsrc}/edu/toronto/cs/gclang/parser/gclang.g"/>
  </target>
  <target name="clean_gclangparser">
    <delete file="${jsrc}/edu/toronto/cs/gclang/parser/GCLangLexer.java"/>
    <delete file="${jsrc}/edu/toronto/cs/gclang/parser/GCLangParser.java"/>
    <delete file="${jsrc}/edu/toronto/cs/gclang/parser/GCLangBuilder.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/gclang/parser/GCLangLexerTokenTypes.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/gclang/parser/GCLangLexerTokenTypes.txt"/>
  </target>

  <target name="boolpgparser">
    <antlr target="${jsrc}/edu/toronto/cs/boolpg/parser/boolpg.g"/>
  </target>
  <target name="clean_boolpgparser">
    <delete
     file="${jsrc}/edu/toronto/cs/boolpg/parser/BoolProgramLexer.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/boolpg/parser/BoolProgramParser.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/boolpg/parser/BoolProgramBuilder.java"/>

    <delete
     file="${jsrc}/edu/toronto/cs/boolpg/parser/BoolProgramLexerTokenTypes.java"/>
    <delete
     file="${jsrc}/edu/toronto/cs/boolpg/parser/BoolProgramLexerTokenTypes.txt"/>
  </target>


  <target name="init">
    <tstamp/>
    <mkdir dir="${build}"/>
    <mkdir dir="tmp"/>
  </target>

  <target name="yasm_parsers"
	  depends="cparser, executor, declsparser, predparser"/>

  <target name="clean_yasm_parsers"
	  depends="clean_cparser, clean_executor,clean_declsparser,clean_predparser"/>

  <target name="clean_xchek_parsers"
	  depends="clean_ctlparser,clean_gclangparser,clean_boolpgparser"/>

  <target name="xchek_parsers"
	  depends="ctlparser,gclangparser,boolpgparser"/>

  <target name="compile"
          depends="init,resources,yasm_parsers,xchek_parsers">


    <!-- Compile all the java code -->
    <javac
      target="1.4"
      source="1.4"
      classpathref="xbel.classpath"
      srcdir="${jsrc}"
      debug="true"
      destdir="${build}"/>
  </target>

  <target name="doc">
    <javadoc destdir="doc/javadoc" source="1.4" Use="true">
      <fileset dir="${jsrc}">
	<include name="**/*.java"/>
      </fileset>
    </javadoc>
  </target>

  <target name="buildlib" depends="unjar">
    <!-- Delete old jar file -->
    <delete file="${libdir}/buildLib.jar"/>
    <!-- Generate giant jar file -->
    <jar jarfile="${libdir}/buildLib.jar"
      basedir="${jarscratch}"
      compress="false"/>
  </target>

  <target name="unjar" depends="makejarscratch">
    <!-- Unjar all build libraries. -->
    <execon executable="jar" dir="${jarscratch}">
      <arg value="xfv"/>
      <fileset dir="${libdir}/buildLib">
        <patternset>
          <include name="*.jar"/>
        </patternset>
      </fileset>
    </execon>
    <!-- Remove the META-INF directory. -->
    <delete dir="${jarscratch}/META-INF"/>
  </target>

  <target name="makejarscratch">
    <!-- Replace the jar scratch directory if there is one. -->
    <delete dir="${jarscratch}" quiet="true"/>
    <mkdir dir="${jarscratch}"/>
  </target>


  <!-- Gather all the .class files together. -->
  <patternset id="classfiles">
    <include name="**/*.class"/>
    <exclude name="${codedir}/${eduprefix}/ctl/parser/*"/>
  </patternset>

  <patternset id="xmlfiles">
    <include name="**/*.xml"/>
  </patternset>


  <!-- copies resources into the build directory -->
  <target name="resources" depends="init">
    <copy todir="${build}/edu/toronto/cs/resources">
      <fileset dir="${jsrc}/edu/toronto/cs/resources"/>
    </copy>
  </target>
  <!-- create a distribution -->
  <target name="dist2" depends="compile">
    <!-- copy documentation -->
    <copy todir="${distdir}/doc">
      <fileset dir="${docdir}"/>
    </copy>
    <!-- copy CUDD glue -->
    <copy todir="${distdir}/lib">
      <fileset dir="${libdir}">
	<include name="libjcudd.so"/>
      </fileset>
    </copy>
    <!-- copy executable scripts -->
    <copy todir="${distdir}/bin" file="${basedir}/bin/tlqsolver"/>
    <!-- copy support libraries -->
    <copy todir="${distdir}/lib/buildLib">
      <fileset dir="${libdir}/buildLib"/>
    </copy>
    <!-- copy xchek -->
    <copy todir="${distdir}/edu">
      <fileset dir="${basedir}/edu">
	<exclude name="**/yasm/"/>
	<exclude name="**/cfa/"/>
	<exclude name="**/boolpg/"/>
	<exclude name="**/cparser/"/>
	<exclude name="**/expr/"/>
	<exclude name="**/tp/"/>
      </fileset>
    </copy>
    <copy todir="${distdir}/examples/gclang">
      <fileset dir="${basedir}/play/models/gclang"/>
    </copy>
  </target>

  <target name="dist" depends="unjar,compile">
    <!-- Copy al the classfiles into the temporary directory. -->
    <copy todir="${jarscratch}/${eduprefix}">
      <fileset dir="${codedir}">
        <patternset refid="classfiles"/>
	<patternset refid="xmlfiles"/>
      </fileset>
    </copy>
    <jar jarfile="${distdir}/xbel.jar"
         basedir="${jarscratch}"
	 compress="true"/>
  </target>

  <target name="clean">
    <!-- Delete build directory -->
    <delete dir="${build}"/>
  </target>

  <target name="realclean"
	  depends="clean,clean_yasm_parsers,clean_xchek_parsers"/>


  <!-- Rebuild the whole project. -->
  <target name="rebuild">
    <antcall target="clean"/>
    <antcall target="compile"/>
  </target>

  <target name="mkscr">
    <pathconvert targetos="unix" property="xbel.classpath.unix" refid="xbel.classpath"/>
   <echo file="gui">#!/bin/sh

java -Dlogger.file.name=${basedir}/log-cfg/xbel.log.cfg -Xnoclassgc -Xms16m -Xmx640m -cp ${xbel.classpath.unix} edu.toronto.cs.gui.XChekGUI "$@"
   </echo>
   <chmod file="gui" perm="u+x"/>
  </target>
</project>
